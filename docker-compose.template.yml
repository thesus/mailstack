version: "3.5"

{{ define "certificates" }}
{{- if eq .ssl.certificate "caddy" -}}
      # Modify caddy, for "simple certificates" Dovecot isn't happy with fullchain certs at all. Postfix neither.
      {{ $base_path := print "/etc/certificates/acme/acme-v02.api.letsencrypt.org/sites/" .address "/ " }}
      CERT_PATH: {{ $base_path }}cert.key
      KEY_PATH: {{ $base_path }}{{ .address }}.key
{{- else -}}
      CERT_PATH: {{ with .ssl.cert_path }}{{ . }}{{ else }}/etc/certificates/fullchain.pem{{ end }}
      KEY_PATH: {{ with .ssl.key_path }}{{ . }}{{ else }}/etc/certificates/privkey.pem{{ end }}
{{- end -}}
{{- end -}}

services:
  postfix:
    image: dev.cryptec.at:5000/infrastructure/mailstack/postfix
    build: ./postfix
    environment:
      POSTFIX_MYORIGIN: {{ .domain }}
      POSTFIX_MYDOMAIN: {{ .domain}}
      POSTFIX_VIRTUAL_MAILBOX_DOMAINS: {{ .domain }}
      POSTFIX_LDAP_BIND_DN: {{ .postfix.ldap.bind_dn }}
      POSTFIX_LDAP_BIND_PASSWORD: {{ .postfix.ldap.bind_pw }}
      POSTFIX_LDAP_SEARCH_BASE: {{ .ldap.search_base }}
      POSTFIX_LDAP_HOST: {{ .ldap.server }}
      POSTFIX_LDAP_DOMAIN: {{ .domain }}
      {{ template "certificates" .}}
    ports:
      - "25:25"
      - "587:587"
    networks:
      - internal
      - auth.mailstack.postfix
    volumes:
      - type: volume
        source: certificates
        target: /etc/certificates
        read_only: yes

  dovecot:
    image: dev.cryptec.at:5000/infrastructure/mailstack/dovecot
    build: ./dovecot
    environment:
      DOVECOT_LDAP_BIND_DN: {{ .dovecot.ldap.bind_dn }}
      DOVECOT_LDAP_BIND_PASSWORD: {{ .dovecot.ldap.bind_pw }}
      DOVECOT_LDAP_SEARCH_BASE: {{ .ldap.search_base }}
      DOVECOT_LDAP_HOST: {{ if .ldap.tls }}ldaps://{{ else }}ldap://{{ end }}{{ .ldap.server }}
      {{ template "certificates" .}}
    ports:
      - "143:143"
      - "993:993"
    volumes:
      - type: volume
        source: mailboxes
        target: /var/vmail
      - type: volume
        source: certificates
        target: /etc/certificates
        read_only: yes
    networks:
      - internal
      - auth.mailstack.dovecot

  sogo:
    image: dev.cryptec.at:5000/infrastructure/mailstack/sogo
    build: ./sogo
    user: sogo
    environment:
      SOGO_MAIL_DOMAIN: {{ .domain }}

      SOGO_LDAP_BIND_DN: {{ .sogo.ldap.bind_dn }}
      SOGO_LDAP_BIND_PASSWORD: {{ .sogo.ldap.bind_pw }}
      SOGO_LDAP_BASE_DN: {{ .ldap.search_base }}

      ENABLE_DEBUG: "{{ .sogo.debug }}"

      POSTGRES_USER: {{ .postgres.user }}
      POSTGRES_PASSWORD: {{ .postgres.password }}
      POSTGRES_DB: {{ .postgres.db }}
    networks:
      - internal
      - database
      - sogo.cache
      - sogo.proxy
      - auth.mailstack.sogo
    volumes:
      - type: volume
        source: sogo-web
        target: /usr/lib/GNUstep/SOGo/WebServerResources

  memcached:
    image: memcached:alpine
    networks:
      - sogo.cache

  postgres:
    image: postgres
    restart: always
    volumes:
      - type: volume
        source: postgres-data
        target: /var/lib/postgresql/data/pgdata
    environment:
      POSTGRES_USER: {{ .postgres.user }}
      POSTGRES_PASSWORD: {{ .postgres.password }}
      POSTGRES_DB: {{ .postgres.db }}
      PGDATA: /var/lib/postgresql/data/pgdata
    networks:
      - database

  caddy:
    image: dev.cryptec.at:5000/infrastructure/mailstack/caddy
    build: ./caddy
    networks:
      - sogo.proxy
      {{- if eq .caddy.exposed false }}
      - expose.mailstack.caddy
      {{- end }}
    volumes:
      - type: volume
        source: sogo-web
        target: /etc/sogo/resources
      {{- if eq .caddy.exposed true }}
      - type: volume
        source: certificates
        target: /etc/certificates
      {{- end }}
    {{- if eq .caddy.exposed true }}
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
      # If no domain is set, the webinterface is enabled and not directly published
      {{-if and (not rspamd.webinterface.domain) (and rspamd.webinterface.enable (eq rspamd.webinterface.publish false)) }}
      - "0.0.0.0:11334:11334"
      {{- end}}
    {{- end }}
    environment:
      ADDRESS: {{ .address }}
      CERTIFICATE: "{{ .ssl.certificate }}"
      EXPOSED: "{{ .caddy.exposed }}"
      {{- if .caddy.exposed }}
      SERVER_IP: {{ .caddy.ip_address }}
      {{- end}}
      {{- if and .caddy.exposed (eq .ssl.certificate "caddy")}}
      EMAIL: {{ .caddy.email }}
      {{- end }}
      {{ template "certificates" .}}

      {{-if and rspamd.webinterface.domain (and rspamd.webinterface.enable (eq rspamd.webinterface.publish false)) }}
      RSPAMD_DOMAIN: {{ rspamd.webinterface.domain }}
      {{- end}}

  rspamd:
    image: dev.cryptec.at:5000/infrastructure/mailstack/rspamd
    build: ./rspamd
    networks:
      # Connection to dovecot and postfix
      - internal
       # Connection to redis
      - rspamd.database
      {{- if and .rspamd.webinterface.enable (eq rspamd.webinterface.publish false) }}
      - rspamd.proxy
      {{- end }}
      {{- if and .rspamd.webinterface.enable .rspamd.webinterface.publish }}
      - expose.mailstack.rspamd
      {{- end }}
    environment:
      # Because rspamd takes a hashed password all dollarsigns need to be escaped
      RSPAMD_WEBINTERFACE_PASSWORD: "{{ replace .rspamd.controller.password '$' '$$' }}"
      RSPAMD_WEBINTERFACE_ENABLE_PASSWORD: "{{ replace .rspamd.controller.enable_password '$' '$$' }}"
    volumes:
      - rspamd-data:/var/lib/rspamd

  redis:
    image: redis:latest
    command: ["redis-server", "--appendonly", "yes"]
    networks:
      - rspamd.database
    volumes:
      - redis-data:/data

volumes:
  mailboxes:
  postgres-data:
  sogo-web:
  rspamd-data:
  redis-data:
  certificates:
    external:
      name: certificates

networks:
  internal:
  database:
  sogo.proxy:
  sogo.cache:
  rspamd.database:
  {{- if and rspamd.webinterface.enable  (eq .rspamd.webinterface.publish false)) }}
  rspamd.proxy:
  {{- end }}

  auth.mailstack.postfix:
    external:
      name: auth.mailstack.postfix
  auth.mailstack.dovecot:
    external:
      name: auth.mailstack.dovecot
  auth.mailstack.sogo:
    external:
      name: auth.mailstack.sogo

  {{- if eq .caddy.exposed false }}
  expose.mailstack.caddy:
    external:
      name: expose.mailstack.caddy
  {{- end }}

  {{- if and .rspamd.webinterface.enable .rspamd.webinterface.publish }}
  expose.mailstack.rspamd:
    external:
      name: expose.mailstack.rspamd
  {{- end }}
